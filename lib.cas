;====================
; MULT: 掛け算を行うサブルーチン
; GR1 * GR2 -> GR2
MULT	START
	PUSH	0,GR1 ; GR1 の内容をスタックに退避
	PUSH	0,GR2 ; GR2 の内容をスタックに退避
	PUSH	0,GR3 ; GR3 の内容をスタックに退避
	PUSH	0,GR4 ; GR4 の内容をスタックに退避
	LD GR1, 5, GR8
	LD GR2, 6, GR8
	LAD	GR3,0 ; GR3 を初期化
	LD	GR4,GR2
	JPL	LOOP
	XOR	GR4,=#FFFF
	ADDA	GR4,=1
LOOP	SRL	GR4,1
	JOV	ONE
	JUMP	ZERO
ONE	ADDL	GR3,GR1
ZERO	SLL	GR1,1
	AND	GR4,GR4
	JNZ	LOOP
	CPA	GR2,=0
	JPL	END
	XOR	GR3,=#FFFF
	ADDA	GR3,=1
END	ST  GR3, 6, GR8
	POP	GR4
	POP	GR3
	POP	GR2
	POP	GR1
	RET
	END
;====================
; DIV 割り算を行うサブルーチン
; GR1 / GR2 -> 商は GR2, 余りは GR1
; ST-2 / ST-1 → Q: ST-1, R:ST-1 
DIV  START
     PUSH 0, GR1  ; N 
     PUSH 0, GR2  ; D
     PUSH 0, GR3  ; Q
     PUSH 0, GR4  ; R
     PUSH 0, GR5  ; 符号
     LD   GR1, 7, GR8
     LD   GR2, 6, GR8
     LAD  GR3, 0
     LAD  GR4, 0
     LAD  GR5, 0
pl1  CPA  GR1, =0
     JPL  pl2
mi1  XOR  GR5, fl15
     XOR  GR1, =#ffff
     LAD  GR1, 1, GR1
pl2  CPA  GR2, =0
     JPL  mie
mi2  XOR  GR5, fl15
     XOR  GR2, =#ffff
     LAD  GR2,1,GR2
mie  CPA  GR1, fl4
     JPL  st15
     CPA  GR2, fl4
     JPL  st15
     JUMP st4
st15 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl15
     SRL  GR0, 15
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st14
if15 SUBA GR4, GR2
     OR   GR3, fl15
st14 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl14
     SRL  GR0, 14
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st13
if14 SUBA GR4, GR2
     OR   GR3, fl14
st13 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl13
     SRL  GR0, 13
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st12
if13 SUBA GR4, GR2
     OR   GR3, fl13
st12 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl12
     SRL  GR0, 12
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st11
if12 SUBA GR4, GR2
     OR   GR3, fl12
st11 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl11
     SRL  GR0, 11
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st10
if11 SUBA GR4, GR2
     OR   GR3, fl11
st10 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl10
     SRL  GR0, 10
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st9
if10 SUBA GR4, GR2
     OR   GR3, fl10
st9 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl9
     SRL  GR0, 9
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st8
if9 SUBA GR4, GR2
     OR   GR3, fl9
st8 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl8
     SRL  GR0, 8
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st7
if8 SUBA GR4, GR2
     OR   GR3, fl8
st7 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl7
     SRL  GR0, 7
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st6
if7 SUBA GR4, GR2
     OR   GR3, fl7
st6 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl6
     SRL  GR0, 6
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st5
if6 SUBA GR4, GR2
     OR   GR3, fl6
st5 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl5
     SRL  GR0, 5
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st4
if5 SUBA GR4, GR2
     OR   GR3, fl5
st4 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl4
     SRL  GR0, 4
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st3
if4 SUBA GR4, GR2
     OR   GR3, fl4
st3 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl3
     SRL  GR0, 3
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st2
if3 SUBA GR4, GR2
     OR   GR3, fl3
st2 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl2
     SRL  GR0, 2
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st1
if2 SUBA GR4, GR2
     OR   GR3, fl2
st1 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl1
     SRL  GR0, 1
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  st0
if1 SUBA GR4, GR2
     OR   GR3, fl1
st0 SLL  GR4, 1
     LD   GR0, GR1
     AND  GR0, fl0
     SRL  GR0, 0
     OR   GR4, GR0 
     CPL  GR4, GR2
     JMI  ste
if0 SUBA GR4, GR2
     OR   GR3, fl0
ste  CPA  GR5, =0
     JZE  pls
     XOR  GR3, =#ffff
     LAD  GR3, 1, GR3
pls  ST   GR3, 6, GR8
     ST   GR4, 7, GR8
     POP  GR5
     POP  GR4
     POP  GR3
     POP  GR2
     POP  GR1
     RET
fl15 DC   #8000
fl14 DC   #4000
fl13 DC   #2000
fl12 DC   #1000
fl11 DC   #0800
fl10 DC   #0400
fl9 DC    #0200
fl8 DC    #0100
fl7 DC    #0080
fl6 DC    #0040
fl5 DC    #0020
fl4 DC    #0010
fl3 DC    #0008
fl2 DC    #0004
fl1 DC    #0002
fl0 DC    #0001
     END
;====================
; 入力装置から数値データを読み込み，
; その内容を GR2 が指すアドレスに格納するサブルーチン
RDINT	START
	PUSH	0,GR1 ; GR1 の内容をスタックに退避
	PUSH	0,GR3 ; GR3 の内容をスタックに退避
	PUSH	0,GR4 ; GR4 の内容をスタックに退避
	PUSH	0,GR5 ; GR5 の内容をスタックに退避
	PUSH	0,GR6 ; GR6 の内容をスタックに退避
	LD	GR5,GR2 ; GR2 が指す番地を GR5 にコピー
	LD	GR2,=0 ; GR2 を初期化
	LD	GR3,=0 ; GR3 を初期化
	IN	INAREA,INLEN ; 入力を受け取る
	; 入力がnullかどうかのチェック
	CPA	GR3,INLEN
	JZE	ERROR
	; 最初の文字が'-'かどうかのチェック
	LD	GR4,INAREA,GR3
	LAD	GR3,1,GR3
	LD	GR6,GR4 ; GR6 に入力された先頭の文字を保存
	CPL	GR4,=#002D ; '-'かどうか
	JZE	LOOP
	CPL	GR4,='0' ; 数値かどうかのチェック
	JMI	ERROR
	CPL	GR4,='9' 
	JPL	ERROR
	XOR	GR4,=#0030 ; 数値だったら変換
	ADDA	GR2,GR4
	; 「すでに読み込んだ数値を10倍して，
	; 新しく読み込んだ数値と足す．」を繰り返す
LOOP	CPA	GR3,INLEN
	JZE	CODE ; 入力された文字数とGR3が同じであればループを抜ける
	PUSH	0, GR2
	PUSH	10
	CALL	MULT ; GR2 の値を10倍する
	LAD	GR8, 1, GR8
	POP GR2
	LD	GR4,INAREA,GR3
	CPL	GR4,='0' ; 数値かどうかのチェック
	JMI	ERROR
	CPL	GR4,='9' 
	JPL	ERROR
	XOR	GR4,=#0030 ; GR4 の内容を数値に変換
	ADDA	GR2,GR4 ; GR2 に GR1 の内容を足す
	LAD	GR3,1,GR3; GR3 (ポインタ)をインクリメント
	JUMP	LOOP
	; 最初の文字が '-'であった場合は，-1倍する
CODE	CPL	GR6,=#002D
	JNZ	END
	XOR	GR2,=#FFFF
	LAD	GR2,1,GR2
	JUMP	END
	; エラーを出力する
ERROR	OUT	ERRSTR,ERRLEN
END	ST	GR2,0,GR5 ; GR2 の内容を GR5 が指す番地に格納する
	LD	GR2,GR5 ; GR5 が指す番地を GR2 に戻す
	POP	GR6
	POP	GR5
	POP	GR4
	POP	GR3
	POP	GR1
	RET
ERRSTR	DC	'illegal input'
ERRLEN	DC	13
INAREA	DS	6
INLEN	DS	1
	END
;====================
; 入力装置から文字を読み込み，
; その内容を GR2 が指すアドレスに格納するサブルーチン
RDCH	START
	IN	INCHAR,INLEN
	LD	GR1,INCHAR
	ST	GR1,0,GR2
	RET
INCHAR	DS	1
INLEN	DS	1
	END
;====================
; 入力装置から，GR1の文字数を読み込む．
; 読み込んだ文字列は，GR2 が指すアドレスから順に格納される
RDSTR	START
	PUSH	0,GR3 ; GR3 の内容をスタックに退避
	PUSH	0,GR4 ; GR4 の内容をスタックに退避
	PUSH	0,GR5 ; GR5 の内容をスタックに退避
	LAD	GR4,0 ; GR4 を初期化
	IN	INSTR,INLEN
LOOP	CPA	GR4,GR1
	JZE	END ; GR1で指定された文字数を超えたら終わり
	CPA	GR4,INLEN
	JZE	END ; 入力された文字数を超えたら終わり
	LD	GR5,GR2
	ADDA	GR5,GR4 ; 文字の格納先番地を計算
	LD	GR3,INSTR,GR4
	ST	GR3,0,GR5
	LAD	GR4,1,GR4
	JUMP	LOOP
END	POP	GR5
	POP	GR4
	POP	GR3
	RET
INSTR	DS	256
INLEN	DS	1
	END
;====================
; 入力装置からの文字列を改行まで読み飛ばすサブルーチン
RDLN	START
	IN	INAREA,INLEN
	RET
INAREA	DS	256
INLEN	DS	1
	END
;====================
; GR2 の内容（数値データ）を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7 には，出力用番地の先頭アドレスが，
; GR6 には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTINT  START
	PUSH    0,GR1 ; GR1の内容をスタックに退避
        PUSH    0,GR2 ; GR2の内容をスタックに退避
	PUSH	0,GR3 ; GR3の内容をスタックに退避
	PUSH	0,GR2 ; 数値データをもう一度スタックに退避
	LD	GR3,=0 ; GR3 はインデックスとして用いる
	; 数値データが負数である場合は，正の数に変換
	CPA	GR2,=0
	JPL	LOOP1
	XOR	GR2,=#FFFF
	ADDA	GR2,=1
	; 数値データを変換しながら，バッファに格納
LOOP1	PUSH 0, GR2
	PUSH 10
	CALL	DIV
	POP GR2
	POP GR1
	XOR	GR1,=#0030
	ST	GR1,BUFFER,GR3
	LAD	GR3,1,GR3
	CPA	GR2,=0
	JNZ	LOOP1
	; 数値データが負数であれば，'-'を追加
	POP	GR2
	CPA	GR2,=0
	JZE	LOOP2
	JPL	LOOP2
	LD	GR1,='-'
	ST	GR1,BUFFER,GR3
	LAD	GR3,1,GR3
	; BUFFER を逆順にたどりながら，出力用バッファに格納
LOOP2	LAD	GR3,-1,GR3
	LD	GR1,BUFFER,GR3
	LD	GR2,GR7
	ADDA	GR2,GR6
	ST	GR1,0,GR2
	LAD	GR6,1,GR6
	CPA	GR3,=0
	JNZ	LOOP2
END	POP	GR3
	POP	GR2
	POP	GR1
	RET
BUFFER	DS	6	
	END
;====================
; GR2 の内容（文字）を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7 には，出力用番地の先頭アドレスが，
; GR6 には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTCH	START
	PUSH	0,GR1 ; GR1 の内容をスタックに退避
	LD	GR1,GR7
	ADDA	GR1,GR6 ; GR1 に次の文字を格納する番地を代入
	ST	GR2,0,GR1
	LAD	GR6,1,GR6
	POP	GR1
	RET
	END
;====================
; GR2 の指すメモリ番地から，長さ GR1 の文字列を出力装置に書き出すサブルーチン
; このサブルーチンが呼ばれたとき，
; GR7 には，出力用番地の先頭アドレスが，
; GR6 には，現在出力用番地に入っている文字数が，
; それぞれ格納されている．
WRTSTR	START
	PUSH	0,GR3 ; GR3 の内容をスタックに退避
	PUSH	0,GR4 ; GR4 の内容をスタックに退避
	PUSH	0,GR5 ; GR5 の内容をスタックに退避
	LAD	GR3, 0 ; GR3 は制御変数として用いる
LOOP	CPA	GR3,GR1
	JZE	END
	LD	GR4,GR2
	ADDA	GR4,GR3 ; 出力する文字の格納番地を計算
	LD	GR5,0,GR4 ; 出力する文字をレジスタにコピー
	LD	GR4,GR7
	ADDA	GR4,GR6 ; 出力先の番地を計算
	ST	GR5,0,GR4 ; 出力装置に書き出し
	LAD	GR3,1,GR3
	LAD	GR6,1,GR6
	JUMP	LOOP
END	POP	GR5
	POP	GR4
	POP	GR3
	RET
	END
;====================
; 改行を出力装置に書き出すサブルーチン
; 実質的には，GR7で始まるアドレス番地から長さGR6の文字列を出力する
WRTLN	START
	PUSH	0,GR1
	PUSH	0,GR2
	PUSH	0,GR3
	ST	GR6,OUTLEN
	LAD	GR1,0
LOOP	CPA	GR1,OUTLEN
	JZE	END
	LD	GR2,GR7
	ADDA	GR2,GR1
	LD	GR3,0,GR2
	ST	GR3,OUTSTR,GR1
	LAD	GR1,1,GR1
	JUMP	LOOP	
END	OUT	OUTSTR,OUTLEN
	LAD	GR6,0 ; 文字列を出力して，GR6 を初期化
	POP	GR3
	POP	GR2
	POP	GR1
	RET
OUTSTR	DS	256
OUTLEN	DS	1
	END